package org.libserializable.impl.entities;

import com.google.gson.JsonObject;
import org.bukkit.Location;
import org.bukkit.entity.*;
import org.libserializable.impl.SEntity;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;

import com.google.gson.Gson;
import org.libserializable.impl.interfaceRecords.*;
import org.libserializable.util.enums.ActionType;

import static org.libserializable.util.InterfaceHandler.generateInterfaceMethodMap;

/**
 * An internal serializable representation of a living entity
 */
public class SLivingEntity extends SEntity <LivingEntity> {

    public SLivingEntity(LivingEntity livingEntity) {
        super(livingEntity);
    }

    /**
     * From json, spawns the entity at the specified location
     * @param obj a json object generated by the serializer
     * @param location the location in the world to spawn
     */
    public SLivingEntity(JsonObject obj, Location location) {
        super((LivingEntity) Objects.requireNonNull(location.getWorld()).spawnEntity(location, new Gson().fromJson(obj.get("EntityType"), SEntityType.class).type()));
    }

    @Override
    protected Map<Method, Class<?>> setInterfaceMethodMap() {

        return generateInterfaceMethodMap(this.getEntity(), ActionType.SET, ActionType.GET);
    }

    @Override
    protected JsonObject createJsonRepresentation() {
        Gson gson = new Gson();

        JsonObject serializedEntity = new JsonObject();
        serializedEntity.add("EntityType", gson.toJsonTree(new SEntityType(entity.getType())));
        JsonObject attributes = new JsonObject();

        for (Map.Entry<Method, Class<?>> entry : interfaceMethodMap.entrySet()) {
            try {
                if (entry.getKey().getName().startsWith("get")) {

                    Record record = (Record) entry.getKey().invoke(null, this.entity);
                    JsonObject recordJson = gson.toJsonTree(record).getAsJsonObject();
                    attributes.add(entry.getValue().getSimpleName(), recordJson);
                }
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {
                e.printStackTrace();
            }
        }
        serializedEntity.add("Attributes", attributes);

        return serializedEntity;
    }

}
